from Paillier import Paillier
from zkp import ZeroKnowledgeProof
import voting

def casting_vote():
  # Simulate casting a vote  
  g = 2  # Generator for ZKP  
  paillier = Paillier()
  zk = ZeroKnowledgeProof(paillier.n)
  vote = 1  
  encrypted_vote, zk_proof = voting.cast_vote(vote, paillier, zk, g)  
  print(f'Encrypted Vote: {encrypted_vote}')  
  print(f'Zero-Knowledge Proof: {zk_proof}')  
  """
  Encrypted Vote: 277980756175994343171195699729216405884986779619452559050282519884016772883038248005772462070271186049314450853431639112695133920823287402769213743226861839453134885592443112533109042898804835468371733605128679020151205233018062026307411091160913066092684593704350504874341132325984917924264393888253299086181189676541432349555992214151436607725243823920688558208153992562350066265186747744890683968122356483103229780174950398462450087199552390766222168805567490585490554437490863152942351564553553767424911314747018039081031240963820226884302516061881620482104654262505147963947326172670645514813397841675601503
  Zero-Knowledge Proof: (mpz(413019702203684934557776926464568020441800523109846237514223685554886988644133381272436996333500308696578507583654915008952396346812231089609786821851554015539182801632413913879915798674396708276194964120227177901647669412424741717847282977597928009176667442347195924132547840164396037320341293025066770150), mpz(108447023277524224964048694134711052093501136460862359039378017769353736621977), mpz(127817753333198152733627011258209545225659671789520814760616792695115721658801567831090470313383021521606087884901360060406804613623510461354046144283713709104200327615293461894404425443408514396597101806766774648962967376759344401567573385816958875021595180400658953104872577541133988907724271581730939713))
  """


def aggregating_multiple_votes():

  paillier = Paillier()
  encrypted_vote = 277980756175994343171195699729216405884986779619452559050282519884016772883038248005772462070271186049314450853431639112695133920823287402769213743226861839453134885592443112533109042898804835468371733605128679020151205233018062026307411091160913066092684593704350504874341132325984917924264393888253299086181189676541432349555992214151436607725243823920688558208153992562350066265186747744890683968122356483103229780174950398462450087199552390766222168805567490585490554437490863152942351564553553767424911314747018039081031240963820226884302516061881620482104654262505147963947326172670645514813397841675601503

  encrypted_votes = [encrypted_vote, paillier.encrypt(0), paillier.encrypt(1)]  
  aggregated_encrypted_vote = voting.aggregate_votes(encrypted_votes, paillier)  
  print(f'Aggregated Encrypted Vote: {aggregated_encrypted_vote}') 
  """
  Aggregated Encrypted Vote: 1636862771343712486963814828835022402748757221605403073697662996524440474137397131565884465985209488104053069352340497980344369768139024679104193161164121372521962769352478108104051317048504796830968996049423538729236151650800916458583341751232924368188336851014341405687738576175285868167937396566572466635532151343180906492938153947945141486067490615813740279304752322741485051854996612060910455657146735560035236497787487025039304077462079446887316093200261630609434842195160109681232875505230168659450792075464200480050058268978458883951168669208547215513442027548531857633600405232338177221172678437093678927371
  """


def decrypting_aggregated_votes():

  paillier = Paillier()
  aggregated_encrypted_vote = 1636862771343712486963814828835022402748757221605403073697662996524440474137397131565884465985209488104053069352340497980344369768139024679104193161164121372521962769352478108104051317048504796830968996049423538729236151650800916458583341751232924368188336851014341405687738576175285868167937396566572466635532151343180906492938153947945141486067490615813740279304752322741485051854996612060910455657146735560035236497787487025039304077462079446887316093200261630609434842195160109681232875505230168659450792075464200480050058268978458883951168669208547215513442027548531857633600405232338177221172678437093678927371

  final_tally = voting.decrypt_aggregated_vote(aggregated_encrypted_vote, paillier)  
  print(f'Final Decrypted Tally: {final_tally}')
  """
  Final Decrypted Tally: 27550628573681605232964631155384432880725961956875134428625050418367559373584400882680449026334799252876964262727237568220064869210075384338188150240562105620367359199331671461053767732569361617808422499996244069752265233973954320736896561501397463984466115715966216285249690255999645453265822471573330914
  """


def verifying_all_proofs():
  generator_g = 2
  
  zk_proofs = [zk_proof, zk.generate_proof(0, g), zk.generate_proof(1, g)]  
  all_proofs_valid = verify_all_proofs(encrypted_votes, zk_proofs, g, zk)  
  print(f'All Zero-Knowledge Proofs Valid: {all_proofs_valid}')  

def main():
  # casting_vote()
  # aggregating_multiple_votes()
  decrypting_aggregated_votes()


if __name__ == '__main__':
    main()

